/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: chat.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ServerMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: string;
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get user() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        user?: string;
        text?: string;
    }): ServerMessage {
        const message = new ServerMessage({});
        if (data.user != null) {
            message.user = data.user;
        }
        if (data.text != null) {
            message.text = data.text;
        }
        return message;
    }
    toObject() {
        const data: {
            user?: string;
            text?: string;
        } = {};
        if (this.user != null) {
            data.user = this.user;
        }
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeString(1, this.user);
        if (this.text.length)
            writer.writeString(2, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user = reader.readString();
                    break;
                case 2:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ServerMessage {
        return ServerMessage.deserialize(bytes);
    }
}
export class ClientMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: string;
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get user() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set user(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        user?: string;
        text?: string;
    }): ClientMessage {
        const message = new ClientMessage({});
        if (data.user != null) {
            message.user = data.user;
        }
        if (data.text != null) {
            message.text = data.text;
        }
        return message;
    }
    toObject() {
        const data: {
            user?: string;
            text?: string;
        } = {};
        if (this.user != null) {
            data.user = this.user;
        }
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.user.length)
            writer.writeString(1, this.user);
        if (this.text.length)
            writer.writeString(2, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.user = reader.readString();
                    break;
                case 2:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClientMessage {
        return ClientMessage.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedChatService {
    static definition = {
        join: {
            path: "/chat_package.Chat/join",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ClientMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ClientMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ServerMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ServerMessage.deserialize(new Uint8Array(bytes))
        },
        send: {
            path: "/chat_package.Chat/send",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ClientMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ClientMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ServerMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ServerMessage.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract join(call: grpc_1.ServerUnaryCall<ClientMessage, ServerMessage>, callback: grpc_1.sendUnaryData<ServerMessage>): void;
    abstract send(call: grpc_1.ServerUnaryCall<ClientMessage, ServerMessage>, callback: grpc_1.sendUnaryData<ServerMessage>): void;
}
export class ChatClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatService.definition, "Chat", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    join: GrpcPromiseServiceInterface<ClientMessage, ServerMessage> = (message: ClientMessage, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ServerMessage> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.join(message, metadata, options, (error: grpc_1.ServiceError, response: ServerMessage) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    send: GrpcPromiseServiceInterface<ClientMessage, ServerMessage> = (message: ClientMessage, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ServerMessage> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.send(message, metadata, options, (error: grpc_1.ServiceError, response: ServerMessage) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
